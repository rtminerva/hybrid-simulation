import matplotlib.pyplot as plt
import numpy
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
from mpl_toolkits.mplot3d import Axes3D
import os
from dask.array.creation import linspace



def pic_1d(coef,set,sol):
    script_dir = os.path.dirname(__file__)
    results_dir = os.path.join(script_dir, 'ultrasensitive/')
    
    if not os.path.isdir(results_dir):
        os.makedirs(results_dir)
        
    rr = numpy.linspace(0,1.7)
    

    if set['k'] % 1 == 0:#set['t'] >= set['T']:  
        '''Chemotaxis velocity analysis'''        
        plt.figure(1)
        axes = plt.gca()
        plt.title('%s' % ('All'))
        plt.plot(sol['time'], sol['c'], 'g', linewidth=2.0, label = 'S')
        plt.plot(sol['time'], sol['A'], 'c', linewidth=2.0, label = 'A')
        plt.plot(sol['time'], sol['I'], 'm', linewidth=2.0, label = 'I')
        plt.plot(sol['time'], sol['Ki'], 'k', linewidth=2.0, label = 'R')
        plt.plot(sol['time'], sol['Q'], 'b', linewidth=2.0, label = 'Q')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'all=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(2)
        axes = plt.gca()
        plt.title('%s' % ('S'))
        plt.plot(sol['time'], sol['c'], 'g', linewidth=2.0, label = 'S')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=2, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'S=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(10)
        axes = plt.gca()
        plt.title('%s' % ('A'))
        plt.plot(sol['time'], sol['A'], 'c', linewidth=2.0, label = 'A')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'A=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(11)
        axes = plt.gca()
        plt.title('%s' % ('I'))
        plt.plot(sol['time'], sol['I'], 'm', linewidth=2.0, label = 'I')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'I=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()

        plt.figure(3)
        axes = plt.gca()
        plt.title('%s' % ('R'))
        plt.plot(sol['time'], sol['Ki'], 'k', linewidth=2.0, label = 'R')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=2, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'R=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(4)
        axes = plt.gca()
        plt.title('%s' % ('A & I'))
        plt.plot(sol['time'], sol['A'], 'c', linewidth=2.0, label = 'A')
        plt.plot(sol['time'], sol['I'], 'm', linewidth=2.0, label = 'I')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'AI=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(5)
        axes = plt.gca()
        plt.title('%s' % ('S & R'))
        plt.plot(sol['time'], sol['c'], 'g', linewidth=2.0, label = 'S')
        plt.plot(sol['time'], sol['Ki'], 'k', linewidth=2.0, label = 'R')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        plt.ylim(0,1.7)
        flag = 'SR=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(6)
        axes = plt.gca()
        plt.title('%s' % ('Q'))
        plt.plot(sol['time'], sol['Q'], 'b', linewidth=2.0, label = 'Q')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=2, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'Q=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(7)
        axes = plt.gca()
        plt.title('%s' % ('Q & R'))
        plt.plot(sol['time'], sol['Q'], 'b', linewidth=2.0, label = 'Q')
        plt.plot(sol['time'], sol['Ki'], 'k', linewidth=2.0, label = 'R')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'QR=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(12)
        axes = plt.gca()
        plt.title('%s' % ('Q, S & R'))
        plt.plot(sol['time'], sol['Q'], 'b', linewidth=2.0, label = 'Q')
        plt.plot(sol['time'], sol['c'], 'g', linewidth=2.0, label = 'S')
        plt.plot(sol['time'], sol['Ki'], 'k', linewidth=2.0, label = 'R')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        plt.ylim(0,1.7)
        flag = 'QSR=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(8)
        axes = plt.gca()
        plt.title('%s' % ('Q, A & I'))
        plt.plot(sol['time'], sol['Q'], 'b', linewidth=2.0, label = 'Q')
        plt.plot(sol['time'], sol['A'], 'c', linewidth=2.0, label = 'A')
        plt.plot(sol['time'], sol['I'], 'm', linewidth=2.0, label = 'I')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'QAI=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
#         plt.figure(9)
#         axes = plt.gca()
#         plt.title('%s' % ('Q, A & I short'))
# #         plt.plot(sol['time'], sol['Q'], 'b', linewidth=2.0, label = 'Q')
#         plt.plot(sol['time'], sol['A'], 'c', linewidth=2.0, label = 'A')
#         plt.plot(sol['time'], sol['I'], 'm', linewidth=2.0, label = 'I')
#         plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
#         plt.xlim(0,1)
# #         plt.ylim(0,1.2)
#         plt.ylabel('value')
#         plt.xlabel('t (time)')
#         flag = 'QAIshort=%s' % str(sol['p_3']) 
#         plt.savefig(results_dir +"%s.png" % flag)
#         plt.close()
        
        plt.figure(13)
        axes = plt.gca()
        plt.title('%s' % ('A,I & S'))
        plt.plot(sol['time'], sol['A'], 'c', linewidth=2.0, label = 'A')
        plt.plot(sol['time'], sol['I'], 'm', linewidth=2.0, label = 'I')
        plt.plot(sol['time'], sol['c'], 'g', linewidth=2.0, label = 'S')
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('value')
        plt.xlabel('t (time)')
        flag = 'AIS=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()
        
        plt.figure(14)
        axes = plt.gca()
        plt.title('%s' % ('Q(R)'))
        plt.plot(sol['c'], sol['Qr'], 'r', linewidth=2.0)
        plt.legend(bbox_to_anchor=(0.85, 0.25), loc=0, borderaxespad=0.)
        plt.ylabel('Q=A/I')
        plt.xlabel('R')
        plt.ylim(-0.05,2)
        plt.xlim(-0.05,2)
        flag = 'Qr=%s' % str(sol['p_3']) 
        plt.savefig(results_dir +"%s.png" % flag)
        plt.close()



        
    return